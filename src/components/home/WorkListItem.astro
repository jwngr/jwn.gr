---
import type {WorkEntryId} from '../../lib/types';
import {WORK_HISTORY} from '../../lib/workHistory';
import FlexRow from '../atoms/FlexRow.astro';
import ListItem from '../atoms/ListItem.astro';
import Spacer from '../atoms/Spacer.astro';
import Text from '../atoms/Text.astro';

interface Props {
  readonly experienceItemId: WorkEntryId;
}

const {experienceItemId} = Astro.props;

const {name, role, startYear, endYear, url} = WORK_HISTORY[experienceItemId];

const endYearSuffix = endYear ? `${endYear?.toString().slice(-2)}` : '';
---

<ListItem url={url} gap={{mobile: 0, desktop: 32}}>
  <FlexRow gap={8} align="center" justify="flex-start">
    <Text class="work-name">{name}</Text>
    <Text as="h5" class="work-years-mobile" light>
      <Text as="span" light>{startYear}</Text>
      <Text as="span" light>–</Text>
      {
        endYearSuffix ? (
          <Text as="span" light>
            {endYearSuffix}
          </Text>
        ) : (
          <Spacer x={20} />
        )
      }
    </Text>
  </FlexRow>
  <Text class="work-role" flex light>{role}</Text>
  <!-- TODO: `light` up here should apply to all spans and not require them to redeclare. -->
  <Text as="h5" class="work-years-desktop" light>
    <Text as="span" light>{startYear}</Text>
    <Text as="span" light>–</Text>
    {
      endYearSuffix ? (
        <Text as="span" light>
          {endYearSuffix}
        </Text>
      ) : (
        <Spacer x={20} />
      )
    }
  </Text>

  <style>
    .work-name {
      width: 240px;
    }

    .work-years-desktop,
    .work-years-mobile {
      font-variant-numeric: tabular-nums;
      flex-direction: row;
      align-items: center;
      gap: 2px;
    }

    .work-years-mobile {
      display: none;
    }

    .work-years-desktop {
      display: flex;
    }

    @media (max-width: 760px) {
      .work-name {
        width: unset;
      }

      .work-years-mobile {
        display: flex;
      }

      .work-years-desktop {
        display: none;
      }
    }
  </style>
</ListItem>
